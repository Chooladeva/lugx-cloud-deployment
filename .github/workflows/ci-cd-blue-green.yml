name: CI/CD Blue-Green Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  CLUSTER: ${{ secrets.GKE_CLUSTER }}
  ZONE: ${{ secrets.GKE_ZONE }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BASE_URL: "http://mylugxtestdomain.duckdns.org"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Authenticate GitHub Actions to the Google Cloud project and Setup CLI

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY_JSON }}

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1

    # -------------------------
    # Install GKE Auth Plugin to ensure kubectl can authenticate with GKE
    # -------------------------
    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin -q
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

    # -------------------------
    # Configure kubectl to to manage deployments
    # -------------------------
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials $CLUSTER --zone $ZONE --project $PROJECT_ID

    # -------------------------
    # Determine Active / Inactive Color- blue (active) and green (inactive)
    # Deploy updates to the inactive color first, test it, then switch traffic
    # -------------------------
    - name: Get Active Color
      id: get-active-color
      run: |
        # Default to blue; replace with ConfigMap/repo tracking in production
        echo "active=blue" >> $GITHUB_OUTPUT

    - name: Set Inactive Color
      id: set-inactive-color
      run: |
        active="${{ steps.get-active-color.outputs.active }}"
        if [ "$active" = "blue" ]; then
          inactive="green"
        else
          inactive="blue"
        fi
        echo "inactive=$inactive" >> $GITHUB_OUTPUT

    # -------------------------
    # Build & Push Docker Images
    # -------------------------
    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and Push Game Service Image
      run: |
        docker build -t chooladeva/game-service:${{ github.sha }} ./game-service
        docker push chooladeva/game-service:${{ github.sha }}

    - name: Build and Push Order Service Image
      run: |
        docker build -t chooladeva/order-service:${{ github.sha }} ./order-service
        docker push chooladeva/order-service:${{ github.sha }}

    - name: Build and Push Analytics Service Image
      run: |
        docker build -t chooladeva/analytics-service:${{ github.sha }} ./analytics-service
        docker push chooladeva/analytics-service:${{ github.sha }}

    # -------------------------
    # Deploy to Inactive Color- Updates the inactive deployment with the new Docker image
    # -------------------------
    - name: Deploy Game Service to Inactive Color
      run: |
        INACTIVE=${{ steps.set-inactive-color.outputs.inactive }}
        kubectl set image deployment/game-service-$INACTIVE game-service=chooladeva/game-service:${{ github.sha }}
        kubectl rollout status deployment/game-service-$INACTIVE

    - name: Deploy Order Service to Inactive Color
      run: |
        INACTIVE=${{ steps.set-inactive-color.outputs.inactive }}
        kubectl set image deployment/order-service-$INACTIVE order-service=chooladeva/order-service:${{ github.sha }}
        kubectl rollout status deployment/order-service-$INACTIVE

    - name: Deploy Analytics Service to Inactive Color
      run: |
        INACTIVE=${{ steps.set-inactive-color.outputs.inactive }}
        kubectl set image deployment/analytics-service-$INACTIVE analytics=chooladeva/analytics-service:${{ github.sha }}
        kubectl rollout status deployment/analytics-service-$INACTIVE

    # -------------------------
    # Set up Python & Install Dependencies
    # -------------------------
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests

    # -------------------------
    # Run Integration Tests
    # -------------------------
    - name: Run Integration Test via Ingress
      run: |
        echo "Running pytest integration suite against Ingress URLs..."
        pytest tests/integration/
      env:
        BASE_URL_GAMES: http://mylugxtestdomain.duckdns.org/api/games/
        BASE_URL_ORDERS: http://mylugxtestdomain.duckdns.org/api/orders/
        BASE_URL_ANALYTICS: http://mylugxtestdomain.duckdns.org/api/analytics/event

    # -------------------------
    # Switch Ingress to Inactive Color- Updates the Ingress backend to route traffic to the newly deployed inactive color
    # -------------------------
    - name: Switch Ingress to Inactive Color
      run: |
        INACTIVE=${{ steps.set-inactive-color.outputs.inactive }}
        kubectl patch ingress lugx-ingress --type=json -p="[
          {\"op\": \"replace\", \"path\": \"/spec/rules/0/http/paths/0/backend/service/name\", \"value\": \"analytics-service-$INACTIVE\"},
          {\"op\": \"replace\", \"path\": \"/spec/rules/0/http/paths/1/backend/service/name\", \"value\": \"order-service-$INACTIVE\"},
          {\"op\": \"replace\", \"path\": \"/spec/rules/0/http/paths/2/backend/service/name\", \"value\": \"game-service-$INACTIVE\"}
        ]"

    # -------------------------
    # Update Active Marker- Marks which color is now active
    # -------------------------
    - name: Update Active Color Marker
      run: |
        INACTIVE=${{ steps.set-inactive-color.outputs.inactive }}
        # TODO: persist new active color in ConfigMap/repo
        echo "New active color: $INACTIVE"
